name: build

on:
  push:
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - 'NOTICE'
      - '.gitignore'
      - '.dockerignore'
    branches-ignore:
      - daily
    tags:
      - '*'

jobs:
  build-windows:
    strategy:
      fail-fast: false
      matrix:
        name:
          - windows_x86_64
          - windows_arm64
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
    - name: Disk Cleanup
      run: |
        Get-PSDrive
        # Cache 済み Docker Image の削除
        docker rmi $(docker images -q -a)
        # Android SDK の削除
        Remove-Item -Recurse -Force $Env:ANDROID_HOME -ErrorAction Ignore
        Remove-Item -Recurse -Force $Env:ANDROID_NDK_HOME -ErrorAction Ignore
        # JVM の削除
        Remove-Item -Recurse -Force $Env:JAVA_HOME_11_X64 -ErrorAction Ignore
        Remove-Item -Recurse -Force $Env:JAVA_HOME_8_X64 -ErrorAction Ignore
        Get-PSDrive
    - run: "& .\\build.${{ matrix.name }}.ps1"
    - name: Upload Artifact
      uses: actions/upload-artifact@v1
      with:
        name: webrtc.${{ matrix.name }}.zip
        path: _package\${{ matrix.name }}\webrtc.zip
  build-macos:
    strategy:
      fail-fast: false
      matrix:
        name:
          - ios
    runs-on: macOS-11.0
    steps:
    - uses: actions/checkout@v2
    - name: Select Xcode 13.0
      run: sudo xcode-select --switch /Applications/Xcode_13.0.app/Contents/Developer
    - run: ./build.${{ matrix.name }}.sh
    - name: Upload Artifact
      uses: actions/upload-artifact@v1
      with:
        name: webrtc.${{ matrix.name }}.tar.gz
        path: _package/${{ matrix.name }}/webrtc.tar.gz
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        name:
          - raspberry-pi-os_armv6
          - raspberry-pi-os_armv7
          - raspberry-pi-os_armv8
          - ubuntu-18.04_armv8
          - ubuntu-18.04_x86_64
          - ubuntu-20.04_x86_64
          - android
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Disk Cleanup
      run: |
        df -h
        docker rmi `docker images -q -a`
        # 3.9GB
        sudo rm -rf /usr/local/share/boost
        # 17GB
        sudo rm -rf /usr/share/dotnet
        df -h
    - run: ./build.${{ matrix.name }}.sh
    - name: Upload Artifact
      uses: actions/upload-artifact@v1
      with:
        name: webrtc.${{ matrix.name }}.tar.gz
        path: _package/${{ matrix.name }}/webrtc.tar.gz
  create-release:
    name: Create Release
    if: contains(github.ref, 'tags/m')
    needs:
      - build-macos
    runs-on: ubuntu-20.04
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Output upload url
      shell: bash
      run: echo "UPLOAD_URL='${{ steps.create_release.outputs.upload_url }}'" > create-release.env
    - name: Upload create-release Environment
      uses: actions/upload-artifact@v1
      with:
        name: create-release.env
        path: create-release.env
  upload-assets:
    strategy:
      fail-fast: false
      matrix:
        name:
          - ios
    name: Release ${{ matrix.name }}
    if: contains(github.ref, 'tags/m')
    needs:
      - create-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Download ${{ matrix.name }}
      uses: actions/download-artifact@v1
      with:
        name: webrtc.${{ matrix.name }}.tar.gz
    - uses: actions/download-artifact@v1
      with:
        name: create-release.env
    - name: Env to output
      shell: bash
      run: |
        source create-release.env/create-release.env
        echo "::set-output name=upload_url::$UPLOAD_URL"
      id: env
    - name: Upload ${{ matrix.name }} Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.env.outputs.upload_url }}
        asset_path: webrtc.${{ matrix.name }}.tar.gz/webrtc.tar.gz
        asset_name: webrtc.${{ matrix.name }}.tar.gz
        asset_content_type: application/gzip  
